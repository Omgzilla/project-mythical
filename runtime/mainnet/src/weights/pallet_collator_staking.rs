
//! Autogenerated weights for `pallet_collator_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 42.0.0
//! DATE: 2024-09-25, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `blockdeep-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("mainnet-local-v")`, DB CACHE: 1024

// Executed Command:
// ./target/release/mythos-node
// benchmark
// pallet
// --chain
// mainnet-local-v
// --pallet
// pallet-collator-staking
// --extrinsic
// *
// --wasm-execution
// compiled
// --steps
// 50
// --repeat
// 20
// --output
// ./runtime/mainnet/src/weights/pallet-collator-staking.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_collator_staking`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collator_staking::WeightInfo for WeightInfo<T> {
	/// Storage: `CollatorStaking::Candidates` (r:20 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:20 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Invulnerables` (r:0 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 20]`.
	fn set_invulnerables(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `419 + b * (65 ±0)`
		//  Estimated: `1409 + b * (2540 ±0)`
		// Minimum execution time: 25_771_000 picoseconds.
		Weight::from_parts(19_520_275, 0)
			.saturating_add(Weight::from_parts(0, 1409))
			// Standard Error: 12_977
			.saturating_add(Weight::from_parts(7_523_457, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(b.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 2540).saturating_mul(b.into()))
	}
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[1, 19]`.
	fn add_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `467 + b * (38 ±0)`
		//  Estimated: `3939 + b * (38 ±0)`
		// Minimum execution time: 28_260_000 picoseconds.
		Weight::from_parts(29_623_951, 0)
			.saturating_add(Weight::from_parts(0, 3939))
			// Standard Error: 3_647
			.saturating_add(Weight::from_parts(185_877, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 38).saturating_mul(b.into()))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:1)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// The range of component `b` is `[2, 20]`.
	fn remove_invulnerable(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212 + b * (20 ±0)`
		//  Estimated: `1886`
		// Minimum execution time: 18_620_000 picoseconds.
		Weight::from_parts(19_389_315, 0)
			.saturating_add(Weight::from_parts(0, 1886))
			// Standard Error: 1_821
			.saturating_add(Weight::from_parts(80_041, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::DesiredCandidates` (r:0 w:1)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn set_desired_candidates() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_650_000 picoseconds.
		Weight::from_parts(8_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:0 w:1)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_min_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_840_000 picoseconds.
		Weight::from_parts(8_340_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `Session::NextKeys` (r:1 w:0)
	/// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:1 w:0)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn register_as_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `563`
		//  Estimated: `4752`
		// Minimum execution time: 81_690_000 picoseconds.
		Weight::from_parts(83_331_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `CollatorStaking::Candidates` (r:101 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn remove_worst_candidate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12651`
		//  Estimated: `342190`
		// Minimum execution time: 1_059_157_000 picoseconds.
		Weight::from_parts(1_075_727_000, 0)
			.saturating_add(Weight::from_parts(0, 342190))
			.saturating_add(T::DbWeight::get().reads(205))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:1)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn leave_intent() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `522`
		//  Estimated: `4752`
		// Minimum execution time: 96_270_000 picoseconds.
		Weight::from_parts(97_180_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:0 w:1)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	fn note_author() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `248`
		//  Estimated: `3505`
		// Minimum execution time: 16_020_000 picoseconds.
		Weight::from_parts(16_760_000, 0)
			.saturating_add(Weight::from_parts(0, 3505))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `CollatorStaking::CounterForCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::CounterForCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:101 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::LastAuthoredBlock` (r:100 w:0)
	/// Proof: `CollatorStaking::LastAuthoredBlock` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:100 w:0)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Invulnerables` (r:1 w:0)
	/// Proof: `CollatorStaking::Invulnerables` (`max_values`: Some(1), `max_size`: Some(401), added: 896, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::DesiredCandidates` (r:1 w:0)
	/// Proof: `CollatorStaking::DesiredCandidates` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:97 w:97)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:97 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:97 w:97)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 100]`.
	/// The range of component `c` is `[1, 100]`.
	fn new_session(r: u32, c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285 + c * (159 ±0) + r * (122 ±0)`
		//  Estimated: `3521 + c * (3412 ±0) + r * (3762 ±0)`
		// Minimum execution time: 45_841_000 picoseconds.
		Weight::from_parts(46_360_000, 0)
			.saturating_add(Weight::from_parts(0, 3521))
			// Standard Error: 1_125_572
			.saturating_add(Weight::from_parts(48_788_499, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((4_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 3412).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 3762).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:502 w:0)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `r` is `[1, 500]`.
	/// The range of component `s` is `[1, 16]`.
	fn stake(c: u32, r: u32, _s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4757 + c * (118 ±0) + r * (5245 ±0)`
		//  Estimated: `42062 + r * (7713 ±0)`
		// Minimum execution time: 1_066_437_000 picoseconds.
		Weight::from_parts(1_070_977_000, 0)
			.saturating_add(Weight::from_parts(0, 42062))
			// Standard Error: 1_412_556
			.saturating_add(Weight::from_parts(84_079_159, 0).saturating_mul(c.into()))
			// Standard Error: 44_823
			.saturating_add(Weight::from_parts(16_658_241, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(43))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(37))
			.saturating_add(Weight::from_parts(0, 7713).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:502 w:0)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `r` is `[1, 500]`.
	fn unstake_from(c: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2413 + c * (280 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 727_165_000 picoseconds.
		Weight::from_parts(732_984_000, 0)
			.saturating_add(Weight::from_parts(0, 16416))
			// Standard Error: 1_880_157
			.saturating_add(Weight::from_parts(53_292_341, 0).saturating_mul(c.into()))
			// Standard Error: 59_980
			.saturating_add(Weight::from_parts(15_366_972, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 7713).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:502 w:0)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `r` is `[1, 500]`.
	fn unstake_all(c: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2413 + c * (280 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 933_306_000 picoseconds.
		Weight::from_parts(940_076_000, 0)
			.saturating_add(Weight::from_parts(0, 16416))
			// Standard Error: 2_100_810
			.saturating_add(Weight::from_parts(59_455_106, 0).saturating_mul(c.into()))
			// Standard Error: 67_019
			.saturating_add(Weight::from_parts(15_014_320, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 7713).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	fn release(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `346 + c * (20 ±0)`
		//  Estimated: `4752`
		// Minimum execution time: 46_500_000 picoseconds.
		Weight::from_parts(48_230_981, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			// Standard Error: 3_138
			.saturating_add(Weight::from_parts(55_765, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:502 w:0)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:0)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `r` is `[1, 500]`.
	fn claim_rewards(c: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2413 + c * (280 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 712_245_000 picoseconds.
		Weight::from_parts(723_355_000, 0)
			.saturating_add(Weight::from_parts(0, 16416))
			// Standard Error: 1_957_270
			.saturating_add(Weight::from_parts(54_034_995, 0).saturating_mul(c.into()))
			// Standard Error: 62_440
			.saturating_add(Weight::from_parts(15_316_204, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 7713).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:1)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CandidateStake` (r:16 w:16)
	/// Proof: `CollatorStaking::CandidateStake` (`max_values`: None, `max_size`: Some(92), added: 2567, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:1 w:0)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:502 w:0)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:2)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::AutoCompound` (r:1 w:1)
	/// Proof: `CollatorStaking::AutoCompound` (`max_values`: None, `max_size`: Some(37), added: 2512, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:16 w:16)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:1 w:0)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 16]`.
	/// The range of component `r` is `[1, 500]`.
	fn set_autocompound_percentage(c: u32, r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2413 + c * (280 ±0) + r * (5245 ±0)`
		//  Estimated: `16416 + c * (2567 ±0) + r * (7713 ±0)`
		// Minimum execution time: 719_815_000 picoseconds.
		Weight::from_parts(725_614_000, 0)
			.saturating_add(Weight::from_parts(0, 16416))
			// Standard Error: 1_896_475
			.saturating_add(Weight::from_parts(52_906_434, 0).saturating_mul(c.into()))
			// Standard Error: 60_500
			.saturating_add(Weight::from_parts(15_424_518, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(r.into())))
			.saturating_add(T::DbWeight::get().writes(6))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2567).saturating_mul(c.into()))
			.saturating_add(Weight::from_parts(0, 7713).saturating_mul(r.into()))
	}
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:0 w:1)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	fn set_collator_reward_percentage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_950_000 picoseconds.
		Weight::from_parts(8_760_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:0 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_850_000 picoseconds.
		Weight::from_parts(8_560_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::MinStake` (r:0 w:1)
	/// Proof: `CollatorStaking::MinStake` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_minimum_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `267`
		//  Estimated: `1501`
		// Minimum execution time: 14_910_000 picoseconds.
		Weight::from_parts(15_780_000, 0)
			.saturating_add(Weight::from_parts(0, 1501))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:1)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn stop_extra_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `312`
		//  Estimated: `3581`
		// Minimum execution time: 21_670_000 picoseconds.
		Weight::from_parts(22_650_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	fn top_up_extra_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `3581`
		// Minimum execution time: 64_270_000 picoseconds.
		Weight::from_parts(65_650_000, 0)
			.saturating_add(Weight::from_parts(0, 3581))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::TotalBlocks` (r:0 w:1)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CurrentSession` (r:0 w:1)
	/// Proof: `CollatorStaking::CurrentSession` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn start_session() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_740_000 picoseconds.
		Weight::from_parts(2_870_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `CollatorStaking::ExtraReward` (r:1 w:0)
	/// Proof: `CollatorStaking::ExtraReward` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CounterForPerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::CounterForPerSessionRewards` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ClaimableRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::ClaimableRewards` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:101 w:101)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(116), added: 2591, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::TotalBlocks` (r:1 w:0)
	/// Proof: `CollatorStaking::TotalBlocks` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::CollatorRewardPercentage` (r:1 w:0)
	/// Proof: `CollatorStaking::CollatorRewardPercentage` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ProducedBlocks` (r:101 w:100)
	/// Proof: `CollatorStaking::ProducedBlocks` (`max_values`: None, `max_size`: Some(40), added: 2515, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:100 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::PerSessionRewards` (r:1 w:1)
	/// Proof: `CollatorStaking::PerSessionRewards` (`max_values`: None, `max_size`: Some(5238), added: 7713, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[1, 100]`.
	fn end_session(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `553 + c * (261 ±0)`
		//  Estimated: `8703 + c * (2591 ±0)`
		// Minimum execution time: 109_441_000 picoseconds.
		Weight::from_parts(33_071_921, 0)
			.saturating_add(Weight::from_parts(0, 8703))
			// Standard Error: 24_703
			.saturating_add(Weight::from_parts(67_608_512, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes(4))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(c.into())))
			.saturating_add(Weight::from_parts(0, 2591).saturating_mul(c.into()))
	}
	/// Storage: `CollatorStaking::MinCandidacyBond` (r:1 w:0)
	/// Proof: `CollatorStaking::MinCandidacyBond` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::Candidates` (r:1 w:0)
	/// Proof: `CollatorStaking::Candidates` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn update_candidacy_bond() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `514`
		//  Estimated: `4752`
		// Minimum execution time: 65_370_000 picoseconds.
		Weight::from_parts(66_390_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	fn lock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `4752`
		// Minimum execution time: 47_080_000 picoseconds.
		Weight::from_parts(48_430_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `CollatorStaking::UserStake` (r:1 w:0)
	/// Proof: `CollatorStaking::UserStake` (`max_values`: None, `max_size`: Some(378), added: 2853, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Freezes` (r:1 w:1)
	/// Proof: `Balances::Freezes` (`max_values`: None, `max_size`: Some(937), added: 3412, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Locks` (r:1 w:0)
	/// Proof: `Balances::Locks` (`max_values`: None, `max_size`: Some(1287), added: 3762, mode: `MaxEncodedLen`)
	/// Storage: `CollatorStaking::ReleaseQueues` (r:1 w:1)
	/// Proof: `CollatorStaking::ReleaseQueues` (`max_values`: None, `max_size`: Some(357), added: 2832, mode: `MaxEncodedLen`)
	fn unlock() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `280`
		//  Estimated: `4752`
		// Minimum execution time: 70_341_000 picoseconds.
		Weight::from_parts(71_730_000, 0)
			.saturating_add(Weight::from_parts(0, 4752))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}
